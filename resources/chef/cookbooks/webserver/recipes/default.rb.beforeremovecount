#
# Cookbook Name:: webserver
# Recipe:: default
#
# Copyright 2014, YOUR_COMPANY_NAME
#
# All rights reserved - Do Not Redistribute
#
# BootDev defined docker default script

# Check if target web directory is exist, create it if not
# Assign docker access right to user
#yum_package 'docker'
docker_installation_script 'default' do
  repo 'main'
  script_url 'https://get.daocloud.io/docker'
  action :create
end

# Start cgconfig service to meet docker prerequisite
service "cgconfig" do
  action :start
end

# Assign docker access right to user
user = node[:deployuser]
execute 'change_usermod' do
  command "usermod -aG docker #{user}"
end

# Start Docker service
docker_service 'default' do
  host 'unix:///var/run/docker.sock'
  action :start
end

docker_registry 'dockerpriv.kybot.io:5001' do
  username 'keithyau'
  password 'thomas123'
  email 'keithyau@sparkpad.com'
end

#todo make the array be unique elements
node[:deploycode][:runtime].each do |localfolder,docker|
  # Pull latest image
  docker_image docker[:image] do
    tag docker[:tag]
    action :pull
#   notifies :redeploy, 'docker_container[webservice]'
  end
end

count = 81
etchosts = []
Portstring = ''
node[:deploycode][:runtime].each do |localfolder,docker|
    #if tagged localdir, give the localfolder as mount poinT 
    if docker[:mountlocal].include?("localdir")
      #Override dir to custom url
      dir = node[:deploycode][:basedirectory] + localfolder
    else
      dir = docker[:mountlocal]
    end
    docker_port = "0"
    #Override port if it is not shared port (mostly common port are 80 and 8080)
    if docker[:port].eql?("80")
      map_port = "90#{count}"
      count = count + 1
      docker_port = docker[:port]
    elsif docker[:port].eql?("8080")
      portstring = "8080"
      map_port = "90#{count}"
      docker_port = "8080"
      count = count + 1
    elsif docker[:port].eql?("externalweb") #Nginx enabled 
      map_port = "80"
      docker_port = "80"
    else #nothing rewrite
      port_string = "#{docker[:port]}"
      map_port = docker[:port]
      docker_port = docker[:port]
    end

  #Prepare directories
  directory dir do
    owner user
    group user
    mode '0755'
    recursive true
    action :create
  end

  container_name = 'sparkpadgp_' + localfolder
  if container_name.eql?("sparkpadgp_mysql") 
    #Add the first docker
    docker_container container_name do
      repo docker[:image]
      tag docker[:tag]
      kill_after 3
      action :run
      #ignore_failure true
      port docker[:ports]
      binds [ dir + ":#{docker[:mountdocker]}" ]
    end
  else 
    #prepare dockers
    docker_container container_name do
      repo docker[:image]
      tag docker[:tag]
      #Add all docker link
      links etchosts
      kill_after 3
      action :run
#      ignore_failure true
      port "#{map_port}:#{docker_port}"
      binds [ dir + ":#{docker[:mountdocker]}" ]
    end
  end
  etchosts.push("#{container_name}:#{container_name}")
 
  #Add proxy.conf to folder if bootproxy defined
  if node[:externalmode].eql?("bootproxy")
    #Prepare bootproxy directories
    directory "#{node[:deploycode][:basedirectory]}bootproxy" do
      owner user
      group user
      mode '0755'
      recursive true
      action :create
    end
    #Add same amount of proxy templates to Nginx folder
    template "#{node[:deploycode][:basedirectory]}bootproxy/#{localfolder}.proxy.conf" do
      variables(
        :host => container_name,
        :portstring => portstring,
        :prefix => "dev-#{localfolder}",
        :domain => "liansuola.com",
      )
        source "proxy.conf"
        mode 0644
        retries 3
        retry_delay 3
        owner "root"
        group "root"
        action :create
#        ignore_failure true
    end
  end

end
